// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  (function($) {
    var PrettySelect;
    PrettySelect = (function() {
      PrettySelect.prototype.defaults = {
        wrapClass: 'prettyselect-wrap',
        labelClass: 'prettyselect-label',
        dropClass: 'prettyselect-drop'
      };

      function PrettySelect(select, options) {
        var $drop, $label, elements, label;
        this.options = $.extend({}, this.defaults, options);
        this.$select = $(select);
        this.$select.hide().wrap("<div class=" + this.options.wrapClass + "/>");
        this.$wrap = this.$select.parents('.' + this.options.wrapClass);
        label = this.$select.find('option:selected').html();
        $label = $("<div class=" + this.options.labelClass + "/>").html(label);
        this.$wrap.append($label);
        elements = privates.populate(this.$select);
        $drop = $("<ul class=" + this.options.dropClass + ">" + elements + "</ul>");
        $drop.hide();
        this.$wrap.append($drop);
        this.$wrap.on('click', 'li', function() {
          this.$select[0].value = $(this).data('value');
          return privates.fire($select[0], 'change');
        });
        this.$select.on('change', function() {
          var val;
          val = this.$select.val();
          label = $select.find("option[value = " + val + "]").html();
          return $label.html(label);
        });
        $label.on('click', function(e) {
          if ($drop.is(':visible')) {
            return;
          }
          e.stopPropagation();
          $drop.show();
          return $('html').one('click', function() {
            return $drop.hide();
          });
        });
        privates.mutationObserver(this.$select, $.proxy(function(mutations, observer) {
          this.$wrap = this.parents("." + this.options.wrapClass);
          return this.$wrap.find("." + this.options.dropClass).html(privates.populate(this));
        }, $select));
      }

      PrettySelect.prototype.prova = function(echo) {
        return this.$select.addClass(this.options.wrapClass);
      };

      return PrettySelect;

    })();
    return $.fn.extend({
      prettySelect: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('PrettySelect');
          if (!data) {
            $this.data('PrettySelect', (data = new PrettySelect(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(jQuery);

}).call(this);
